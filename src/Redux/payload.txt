In the context of Redux (or any state management system), a **payload** is the data or information that is sent along with an action to the store. The payload provides the additional details that the reducer needs to update the state correctly. 

### Example Explanation:

Let's break down the components:

1. **Action**:
    - An action is a plain JavaScript object that represents an intention to change the state. It must have a `type` property that indicates the type of action to be performed. Optionally, it can have a `payload` property that carries the data needed for that action.

    ```javascript
    {
      type: 'INCREMENT', 
      payload: 10
    }
    ```

    - **Type**: A string that describes the action (e.g., 'INCREMENT', 'DECREMENT').
    - **Payload**: Additional data needed to perform the action (e.g., the amount by which to increment or decrement).

2. **Reducer**:
    - A reducer is a pure function that takes the current state and an action as arguments and returns a new state. It uses the `type` and `payload` from the action to determine how to update the state.

    ```javascript
    function reducer(state = { initialValue: 0 }, action) {
      switch (action.type) {
        case 'INCREMENT':
          return { ...state, initialValue: state.initialValue + action.payload };
        case 'DECREMENT':
          return { ...state, initialValue: state.initialValue - action.payload };
        default:
          return state;
      }
    }
    ```

### Redux Example:

```javascript
// Importing necessary functions from Redux
import { createStore } from 'redux';

// Reducer function
function reducer(state = { initialValue: 0 }, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, initialValue: state.initialValue + action.payload };
    case 'DECREMENT':
      return { ...state, initialValue: state.initialValue - action.payload };
    default:
      return state;
  }
}

// Create the Redux store
const store = createStore(reducer);

// Action creator functions
const incrementAction = (value) => ({
  type: 'INCREMENT',
  payload: value
});

const decrementAction = (value) => ({
  type: 'DECREMENT',
  payload: value
});

// Dispatch actions
store.dispatch(incrementAction(10));
console.log(store.getState());  // Output: { initialValue: 10 }

store.dispatch(decrementAction(5));
console.log(store.getState());  // Output: { initialValue: 5 }
```

### Summary:
- **Payload**: It is the additional data sent with an action that the reducer uses to update the state. For example, if you want to increment a value by 10, the payload would be `10`.
- **Action**: An object with at least a `type` property and optionally a `payload` property.
- **Reducer**: A function that updates the state based on the action type and payload.

In the example above, `payload` carries the value by which the `initialValue` should be incremented or decremented.