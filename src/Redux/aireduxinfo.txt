Certainly! Here is the improved version of the provided Redux code and explanation:

```javascript
// Importing necessary functions from Redux
import { createStore } from 'redux';

// Reducer function
function reducer(state = { initialValue: 0 }, action) {
  switch (action.type) {
    case 'INCREMENT':
      return { ...state, initialValue: state.initialValue + action.payload };
    case 'DECREMENT':
      return { ...state, initialValue: state.initialValue - action.payload };
    default:
      return state;
  }
}

// Create the Redux store
const store = createStore(reducer);

// Global state
console.log(store.getState());

// Action creator functions
const incrementAction = (value) => ({
  type: 'INCREMENT',
  payload: value
});

const decrementAction = (value) => ({
  type: 'DECREMENT',
  payload: value
});

// Dispatch actions
store.dispatch(incrementAction(10));
console.log(store.getState());

store.dispatch(decrementAction(5));
console.log(store.getState());
```

### Explanation:

1. **Reducer Function**:
   - The reducer function now handles two types of actions: `INCREMENT` and `DECREMENT`.
   - It uses a switch statement to determine the type of action and updates the state accordingly.
   - The `initialValue` in the state is updated based on the `payload` of the action.

2. **Create the Store**:
   - The `createStore` function is used to create the Redux store with the defined reducer.

3. **Global State**:
   - `store.getState()` is used to retrieve the current state of the store.

4. **Action Creators**:
   - Defined action creator functions (`incrementAction` and `decrementAction`) to create actions with specific types and payloads.

5. **Dispatch Actions**:
   - Actions are dispatched using `store.dispatch`.
   - The state is logged to the console after each dispatch to see the updated state.

### Example Actions:
- **Increment Action**: `{ type: 'INCREMENT', payload: 10 }` - This will increase the `initialValue` by 10.
- **Decrement Action**: `{ type: 'DECREMENT', payload: 5 }` - This will decrease the `initialValue` by 5.

This code now includes meaningful action handling, state updates, and action creator functions to streamline dispatching actions.